#!/bin/bash

# OS verification
# extracted from https://github.com/josephwecker/bashrc_dispatch

if [ -z "$SHELL_PLATFORM" ]; then
    SHELL_PLATFORM='OTHER'
    case "$OSTYPE" in
      *'linux'*   ) SHELL_PLATFORM='LINUX' ;;
      *'darwin'*  ) SHELL_PLATFORM='OSX' ;;
      *'freebsd'* ) SHELL_PLATFORM='BSD' ;;
      *'cygwin'*  ) SHELL_PLATFORM='CYGWIN' ;;
      *'msys'*  ) SHELL_PLATFORM='MINGW' ;;
    esac
fi

if ! type -p shell_is_login ; then
  shell_is_linux       () { [[ "$OSTYPE" == *'linux'* ]] ; }
  shell_is_osx         () { [[ "$OSTYPE" == *'darwin'* ]] ; }
  shell_is_cygwin      () { [[ "$OSTYPE" == *'cygwin'* ]] ; }
  shell_is_mingw      () { [[ "$OSTYPE" == *'msys'* ]] ; }
  shell_is_login       () { shopt -q login_shell ; }
  shell_is_interactive () { test -n "$PS1" ; }
  shell_is_script      () { ! shell_is_interactive ; }
fi


# PIP SECTION

# pip cache configuration
PIP_DOWNLOAD_CACHE=~/.pip-cache

# VIRTUALENVWRAPPER SECTION
export WORKON_HOME=$HOME/.entornos
if [ -f /usr/local/bin/virtualenvwrapper.sh ]; then
  source /usr/local/bin/virtualenvwrapper.sh 
fi

# BASH COMPLETION SECTION

if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
else  
  if $(shell_is_mingw ); then 
    . /etc/git-completion.bash
  fi
fi

# GIT PROMPT SECTION
function parse_git_dirty {
  if $(shell_is_mingw ); then 
    # echo $(git status 2> /dev/null | tail -n1) | awk '{if($1 " " $2 == "nothing to"){ print "*";} else{ print $2;}}'
    [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit, working directory clean" ]] && echo "*"
  else
    [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit (working directory clean)" ]] && echo "*"
  fi
}

function parse_git_branch {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/[\1$(parse_git_dirty)]/"
}

function into_venv {
    if [ "$VIRTUAL_ENV" != "" ]; then
        echo "─◈─"
    else
        echo "┌─"
    fi
}

function git_space {
    if [ "$(parse_git_branch)" != "" ]; then
        echo " "
    fi
}


# PROMPT SECTION
# PS1='\[\e[36;1m\]\w\[\e[0m\] $(__git_ps1 "[\[\e[0;32m\]%s\[\e[0m\]\[\e[0;33m\]$(parse_git_dirty)\[\e[0m\]]")\n\$ \[\e[0m\]' 
# export PS1='\[\e[0;1m\]┌─( \[\e[31;1m\]\u\[\e[0;1m\] ) - (  \[\e[36;1m\]\w\[\e[0;1m\] $(__git_ps1 "[\[\e[0;32m\]%s\[\e[0m\]\[\e[0;33m\]$(parse_git_dirty)\[\e[0m\]]") )\n└──┤ \[\e[0m\]'
export PS1='\[\e[0;1m\]$(into_venv)( \[\e[31;1m\]\u\[\e[0;1m\] ) - ( \[\e[36;1m\]\w$(git_space)\[\e[0;1m\]$(__git_ps1 "[\[\e[0;32m\]%s\[\e[0m\]\[\e[0;33m\]$(parse_git_dirty)\[\e[0m\]]") )\n└──► \[\e[0m\]'

# ALIAS SECTION

function addalias(){
    alias $1="$2";
    echo "alias $1=\"$2\"" >> ~/.aliases;
    if [ "$3" != "--quiet" ]; then 
        echo "done."
    fi 
}

function rmalias(){
    #cat ~/.aliases | grep -v "alias test" > ~/.aliases; # delete alias 
    echo "`sed -e "s/alias $1/# alias $1/g" ~/.aliases`" > ~/.aliases;
    unalias $1
    echo "$1 removed from aliases";
}

function _rmalias(){
    local cur opts
    cur="${COMP_WORDS[COMP_CWORD]}"
    opts=$(alias | awk '{split($2,a,"=");print a[1]}')
    COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
}

complete -F _rmalias rmalias

if [ -f ~/.aliases ]; then
    source ~/.aliases
else
    touch ~/.aliases;
    addalias ls ls\ --color --quiet;
    addalias lsalias alias --quiet
fi 

